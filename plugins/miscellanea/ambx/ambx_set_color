#!/usr/bin/env python3

from ambx.ambx import AMBX, Lights
import struct
import sys
import argparse
import syslog

lights = [Lights.LEFT, Lights.WWLEFT, Lights.WWCENTER, Lights.WWRIGHT, Lights.RIGHT]

def set_color(light, red, green, blue):
    dev = None
    try:
        dev = AMBX(0)
        if light == 0:
            for light in lights:
                try:
                    dev.set_color_rgb8(light, [red, green, blue])
                except IOError:
                    syslog.syslog(syslog.LOG_ERR, "USB Error")
                    sys.exit(74)
                    break
        else:
            try:
                dev.set_color_rgb8(lights[light-1], [red, green, blue])
            except IOError:
                syslog.syslog(syslog.LOG_ERR, "USB Error")
                sys.exit(74)
    except IndexError:
        if dev is None:
            syslog.syslog(syslog.LOG_ERR, "No AmbX found")
            sys.exit(69)

def color8bit(x):
    x = int(x)
    if x < 0 or x > 255:
        raise argparse.ArgumentTypeError("Colors should be in range 0-255")
    return x

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Set a color on the LEDs of the Philips amBX sound system')
    parser.add_argument('-l', '--light', type=int, choices=range(0,6), default=0, help='One of the 5 LEDs, left to right, 0 means all')
    parser.add_argument('-r', '--red', type=color8bit, default=0, help='Red value')
    parser.add_argument('-g', '--green', type=color8bit, default=0, help='Green value')
    parser.add_argument('-b', '--blue', type=color8bit, default=0, help='Blue value')
    parser.set_defaults(func=set_color)
    args = parser.parse_args()
    args.func(args.light, args.red, args.green, args.blue)
